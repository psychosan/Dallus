using System.Data;
using System.Linq.Expressions;
using Dapper;

namespace Repox
{
    public interface IRepox
    {
        string Connection { get; }

        int Count<T>() where T : class, IRepoModel;
        int CountWhere<T>(Expression<Func<T, bool>> predicate) where T : class, IRepoModel;
        int CountWhere<T>(string whereCondition, object parameters = null) where T : class, IRepoModel;
        bool Delete<T>(T model) where T : class, IRepoModel;
        bool Delete<T>(dynamic pkId) where T : class, IRepoModel;
        bool DeleteWhere<T>(Expression<Func<T, bool>> predicate) where T : class, IRepoModel;
        bool DeleteWhere<T>(string whereCondition, object? parameters = null) where T : class, IRepoModel;
        bool ExecAction<T>(string sqlScript, object? parameters = null, CommandType commandType = CommandType.Text) where T : class, IRepoModel;
        IEnumerable<T> ExecAny<T>(string sqlScript, object? parameters = null, CommandType commandType = CommandType.Text) where T : class, IRepoModel;
        T ExecAnySingle<T>(string sqlScript, object? parameters = null, CommandType commandType = CommandType.Text);
        IEnumerable<T> ExecSproc<T>(string sprocName, object? parameters = null) where T : class, IRepoModel;
        T ExecSprocSingle<T>(string sprocName, object? parameters = null) where T : class, IRepoModel;
        int Execute(CommandDefinition command);
        int Execute(string sql, object param = null, IDbTransaction? transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<int> ExecuteAsync(CommandDefinition command);
        Task<int> ExecuteAsync(string sql, object param = null, IDbTransaction? transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        IDataReader? ExecuteReader(CommandDefinition command);
        IDataReader? ExecuteReader(CommandDefinition command, CommandBehavior commandBehavior);
        IDataReader? ExecuteReader(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<IDataReader>? ExecuteReaderAsync(CommandDefinition command);
        Task<IDataReader>? ExecuteReaderAsync(string sql, object param = null, IDbTransaction? transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        object? ExecuteScalar(CommandDefinition command);
        object? ExecuteScalar(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        T? ExecuteScalar<T>(CommandDefinition command);
        T? ExecuteScalar<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<object>? ExecuteScalarAsync(CommandDefinition command);
        Task<object>? ExecuteScalarAsync(string sql, object param = null, IDbTransaction? transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<T>? ExecuteScalarAsync<T>(CommandDefinition command);
        Task<T>? ExecuteScalarAsync<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        T FindById<T>(dynamic pkVal) where T : class, IRepoModel;
        T GetById<T>(dynamic pkVal) where T : class, IRepoModel;
        IEnumerable<T> GetList<T>() where T : class, IRepoModel;
        IEnumerable<T> GetListWhere<T>(string whereCondition) where T : class, IRepoModel;
        IEnumerable<T> GetListWhere<T>(Expression<Func<T, bool>> predicate) where T : class, IRepoModel;
        IEnumerable<T> GetPage<T>(int page = 1, int pageSize = 15) where T : class, IRepoModel;
        IEnumerable<T> GetPageWhere<T>(string whereCondition, int page, int pageSize) where T : class, IRepoModel;
        IEnumerable<T> GetPageWhere<T>(Expression<Func<T, bool>> predicate, int page, int pageSize) where T : class, IRepoModel;
        dynamic GetPropValue(object model, string propName);
        T GetSingle<T>(dynamic pkId) where T : class, IRepoModel;
        T GetSingleWhere<T>(Expression<Func<T, bool>> predicate) where T : class, IRepoModel;
        T GetSingleWhere<T>(string whereCondition, object? parameters = null) where T : class, IRepoModel;
        IEnumerable<T> GetTop<T>(int topCount) where T : class, IRepoModel;
        IEnumerable<T> GetTopWhere<T>(int topCount, string whereCondition) where T : class, IRepoModel;
        IEnumerable<T> GetTopWhere<T>(int topCount, Expression<Func<T, bool>> predicate) where T : class, IRepoModel;
        T Insert<T>(T model, ModelInfo? modInfo = null) where T : class, IRepoModel;
        IEnumerable<T> InsertAll<T>(IEnumerable<T> models) where T : class, IRepoModel;
        bool IsNullEmptyOrZero(dynamic value);
        bool NotNullEmptyOrZero(dynamic value);
        IEnumerable<dynamic>? Query(string sql, object param = null, IDbTransaction transaction = null, bool buffered = true, int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<object>? Query(Type type, string sql, object param = null, IDbTransaction transaction = null, bool buffered = true, int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<T>? Query<T>(CommandDefinition command);
        IEnumerable<T>? Query<T>(string sql, object param = null, IDbTransaction transaction = null, bool buffered = true, int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<TReturn>? Query<TReturn>(string sql, Type[] types, Func<object[], TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<TReturn>? Query<TFirst, TSecond, TReturn>(string sql, Func<TFirst, TSecond, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<TReturn>? Query<TFirst, TSecond, TThird, TReturn>(string sql, Func<TFirst, TSecond, TThird, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<dynamic>> QueryAsync(CommandDefinition command);
        Task<IEnumerable<object>> QueryAsync(Type type, CommandDefinition command);
        Task<IEnumerable<dynamic>> QueryAsync(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<object>> QueryAsync(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<T>> QueryAsync<T>(CommandDefinition command);
        Task<IEnumerable<T>> QueryAsync<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<TReturn>> QueryAsync<TReturn>(string sql, Type[] types, Func<object[], TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(CommandDefinition command, Func<TFirst, TSecond, TReturn> map, string splitOn = "Id");
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(string sql, Func<TFirst, TSecond, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(CommandDefinition command, Func<TFirst, TSecond, TThird, TReturn> map, string splitOn = "Id");
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(string sql, Func<TFirst, TSecond, TThird, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TReturn> map, string splitOn = "Id");
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, string splitOn = "Id");
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, string splitOn = "Id");
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, string splitOn = "Id");
        Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = default, CommandType? commandType = default);
        dynamic QueryFirst(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        object QueryFirst(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        T QueryFirst<T>(CommandDefinition command);
        T QueryFirst<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<dynamic> QueryFirstAsync(CommandDefinition command);
        Task<object> QueryFirstAsync(Type type, CommandDefinition command);
        Task<object> QueryFirstAsync(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<T> QueryFirstAsync<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        dynamic QueryFirstOrDefault(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        object QueryFirstOrDefault(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        T QueryFirstOrDefault<T>(CommandDefinition command);
        T QueryFirstOrDefault<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<dynamic> QueryFirstOrDefaultAsync(CommandDefinition command);
        Task<object> QueryFirstOrDefaultAsync(Type type, CommandDefinition command);
        Task<object> QueryFirstOrDefaultAsync(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<T> QueryFirstOrDefaultAsync<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        SqlMapper.GridReader QueryMultiple(CommandDefinition command);
        SqlMapper.GridReader QueryMultiple(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<SqlMapper.GridReader> QueryMultipleAsync(CommandDefinition command);
        Task<SqlMapper.GridReader> QueryMultipleAsync(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        dynamic QuerySingle(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        object QuerySingle(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        T QuerySingle<T>(CommandDefinition command);
        T QuerySingle<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<dynamic> QuerySingleAsync(CommandDefinition command);
        Task<object> QuerySingleAsync(Type type, CommandDefinition command);
        Task<object> QuerySingleAsync(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<T> QuerySingleAsync<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        dynamic QuerySingleOrDefault(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        object QuerySingleOrDefault(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        T QuerySingleOrDefault<T>(CommandDefinition command);
        T QuerySingleOrDefault<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<dynamic> QuerySingleOrDefaultAsync(CommandDefinition command);
        Task<object> QuerySingleOrDefaultAsync(Type type, CommandDefinition command);
        Task<object> QuerySingleOrDefaultAsync(Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        Task<T> QuerySingleOrDefaultAsync<T>(string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = default, CommandType? commandType = default);
        T Save<T>(T model, ModelInfo modInfo = null) where T : class, IRepoModel;
        IEnumerable<T> SaveAll<T>(IEnumerable<T> models) where T : class, IRepoModel;
        dynamic SimpleCast(dynamic obj, Type castTo);
        dynamic SimplePkCast(dynamic objValue, bool isNumeric);
        bool Update<T>(T model, ModelInfo? modelInfo = null) where T : class, IRepoModel;
        T Update<T>(T model, out bool success, ModelInfo? modelInfo = null) where T : class, IRepoModel;
        IEnumerable<T> UpdateAll<T>(IEnumerable<T> models) where T : class, IRepoModel;
        bool UpdateWhere<T>(string whereCondition, T model) where T : class, IRepoModel;
        bool UpdateWhere<T>(Expression<Func<T, bool>> predicate, T model) where T : class, IRepoModel;
    }
}